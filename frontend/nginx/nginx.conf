events {
  worker_connections  1024;
}

http {

  # Define upstream server, must be in the same docker network!
  # There is no problem when started from the same docker-compose file.
  upstream docker-backend {
    server backend:8080;
  }

  server {
    listen 80;
    server_name  _;

    # Redirect all traffic to SSL
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl default_server;

    # enables SSLv3/TLSv1, but not SSLv2 which is weak and should no longer be used.
    ssl_protocols SSLv3 TLSv1;

    # disables all weak ciphers
    ssl_ciphers ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM;

    server_name  _;

    ## Access and error logs.
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log info;

    ## Keep alive timeout set to a greater value for SSL/TLS.
    keepalive_timeout 75 75;

    ## See the keepalive_timeout directive in nginx.conf.
    ## Server certificate and key.
    ssl_certificate /certs/localhost.crt;
    ssl_certificate_key /certs/localhost.key;
    ssl_session_timeout  5m;

    ## Strict Transport Security header for enhanced security. See
    ## http://www.chromium.org/sts. I've set it to 2 hours; set it to
    ## whichever age you want.
    add_header Strict-Transport-Security "max-age=7200";

    root /build;
    index index.html index.htm;

    location / {

    }

    location /api {
      proxy_pass         http://docker-backend;
      proxy_redirect     off;
    }
  }
}